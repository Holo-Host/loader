{"version":3,"sources":["../web/hQuery.js"],"names":["hQuery","settings","resolverUrl","errorUrl","_url","_dna","_tranche","getHappUrl","getHappDna","initHapp","window","location","hostname","addr","queryForHosts","then","obj","processWorkerResponse","r","fetchHappContent","html","replaceHtml","url","dna","console","log","fetch","method","cache","headers","body","encodeURIComponent","json","code","hosts","length","text","handleError","e","insertScripts","document","open","write","close","parser","DOMParser","doc","parseFromString","script","createElement","src","innerHTML","head","appendChild","documentElement","outerHTML"],"mappings":"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","file":"hQuery.b398b2d8.map","sourceRoot":"..","sourcesContent":["/**\n * hQuery.js\n * Is a helper module that manages connection between browser and HoloPorts on Holo network\n * Public API exposes: initHapp(), getHappUrl(), getHappDna()\n * TODO: In the future if the process of connecting to the host takes time (like more than 500ms)\n *       display nice Holo logo and something like \"Connecting to Holo network...\"\n */\n\nconst hQuery = (function(){\n    // Networking settings etc\n    const settings = {\n        resolverUrl: '//resolver.holohost.net', // Address of url resolver service worker\n        errorUrl:  '//loader1.holohost.net/error.html' // Address of an error page handler\n    };\n\n    // Private data store of the module\n    let _url = '', // Url of the current hApp (host name from the browser's location field)\n        _dna = '', // Hash of DNA of the current hApp\n        _tranche = []; // Tranche - array of host addresses that serve given hApp\n\n    /**\n     * Url getter\n     * @return url of the current hApp\n     */\n    const getHappUrl = () => _url;\n\n    /**\n     * DNA hash getter\n     * @return Hash of DNA of the current hApp\n     */\n    const getHappDna = () => _dna;\n\n    /**\n     * Init hApp by taking url and grabing content from resolved HoloPort address\n     * TODO: In the future we will want to have some mechanism of detecting failed calls\n     *       to hosts, making call to another host from the list and reporting slacker\n     *       to the tranche service\n     * @return null\n     */\n    const initHapp = () => {\n        // Save url of hApp\n        // TODO: Check if protocol is https?\n        _url = window.location.hostname;\n\n        // Extend scope of ip\n        let addr;\n        // tmp\n        //_url = \"test2.imagexchange.pl\";\n        queryForHosts(_url)\n            .then(obj => processWorkerResponse(obj))\n            .then(r => {\n                // Add protocol to hostname\n                addr = 'ws://' + r;\n                return fetchHappContent(r);\n            })\n            .then(html => replaceHtml(html, addr))\n            /*\n            .catch(e => handleError({\n                code: e.code\n            }))\n            */\n           ;\n    }\n\n    /**\n     * Query Cloudflare worker resolver for array of hosts serving hApp, that is\n     * registered with given URL. Can be identified by url or dna, dna takes precedence.\n     * @param {string} url Url of the requested hApp\n     * @param {string} dna Hash of a dna of requested hApp\n     * @return {Object} {dna: '', ips: []} Hash of DNA and array of IPs\n     */\n    const queryForHosts = (url = \"\", dna = \"\") => {\n        console.log('getting hosts for', url);\n        // Call worker to resolve url to array of addresses of HoloPorts\n        return fetch(settings.resolverUrl, {\n                method: \"POST\",\n                cache: \"no-cache\",\n                //mode: \"no-cors\", can't use this mode, because I won't be able to access response body\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\", // Do not change or CORS will come and eat you alive\n                },\n                body: 'url=' + encodeURIComponent(url) + '&dna=' + encodeURIComponent(dna)\n            })\n            .then(r => {\n                console.log(\"response\", r)\n                return r.json();\n              }\n            );\n    }\n\n    /**\n     * Process response from the workers - for now trivialy just select first IP from array\n     * @param {Object} obj Response from resolver Cloudflare worker\n     * @param {array} obj.hosts Array of ips (or FQDNs) of HoloPorts serving given hApp\n     * @param {string} obj.dna Hash of a DNA of requested hApp\n     * @return {string} Return address of a host to initiate connection\n     */\n    const processWorkerResponse = obj => {\n        console.log(\"processing worker response\");\n\n        // Save somewhere hApp DNA hash\n        if (typeof obj.dna !== 'string' || obj.dna === \"\") {\n            throw {\n                code: 404\n            };\n        } else {\n            console.log(obj.dna);\n            _dna = obj.dna;\n            console.log(_dna);\n        }\n\n        // Extract an IP that we want to grab\n        if (typeof obj.hosts !== 'object' || obj.hosts.length === 0 || obj.hosts[0] === \"\") {\n            throw {\n                code: 503\n            };\n            return;\n        } else {\n            // Trivial now\n            console.log(obj.hosts);\n            _tranche = obj.hosts;\n            console.log(_tranche);\n            return _tranche[0];\n        }\n    }\n\n    /**\n     * Fetch hApp content from the given HoloPort (now identified by IP)\n     * TODO: Pass more arguments (DNA, user pk), because one HoloPort can serve\n     *       multiple hApps for multiple users...\n     * TODO: Shall I also parse from url a path after domain name? That way we could maybe\n     *       support a server side rendering of a hApp if container understands it...\n     * @param {string} addr IP (or FQDNs) of HoloPort serving given hApp\n     * @return {Promise} Html of the hApp\n     */\n    const fetchHappContent = (addr) => {\n        // Fetch hApp content from selected HoloPort\n        return fetch('//' + addr)\n            .then(r => r.text())\n    }\n\n    /**\n     * Redirect to error page and pass error info if available\n     * TODO: Make this error handling much more sophisticated in the future,\n     *       i.e. do not give up on first failure but try other hosts from the _tranche\n     * @param {Object} e Error returned\n     * @param {int} e.code Error code (standard http request error code)\n     * @param {string} e.text Error description\n     * @return null\n     */\n    const handleError = (e) => {\n        if (typeof e !== 'undefined' && e.code) {\n            console.log('Received error from Cloudflare worker: ' + e.code);\n        } else {\n            console.log('Received unknown error');\n            e = {\n                code: 500,\n            }\n        }\n\n        /*\n        window.location.href = settings.errorUrl\n                             + '?errorCode=' + e.code\n                             + ((_url) ? ('&url=' + encodeURI(_url)) : \"\")\n                             + ((_dna) ? ('&dna=' + encodeURI(_dna)) : \"\");\n                             */\n    }\n\n    /**\n     * Replace entire html of the page\n     * @param {string} html New html to replace the old one\n     * @param {string} addr FQDN or IP of base of all the relative addresses (with protocol and port, e.g. //test.holo.host:4141\")\n     * @return null\n     */\n    const replaceHtml = (html, addr) => {\n        html = insertScripts(html, addr);\n        document.open();\n        document.write(html);\n        document.close();\n    }\n\n\n    /**\n     * Adds a script that imports hClient and overrides the window web client.\n     * Effectively enables a holochain app to be holo compatible\n     *\n     * @param {string} html Html to add tag to\n     * @param {string} url hostname (with protocol and port, e.g. //test.holo.host:4141\")\n     * @return {string} Html with new script tag inserted at the top level\n     */\n    const insertScripts = (html, url) => {\n        parser = new DOMParser();\n        doc = parser.parseFromString(html, \"text/html\");\n\n        let script = doc.createElement(\"script\");\n        script.src = \"hClient.js\"\n        script.innerHTML = `hClient.overrideWebClient(${url})`;\n\n        doc.head.appendChild(script);\n        return doc.documentElement.outerHTML\n    }\n\n    // Public API\n    return {\n        initHapp,\n        getHappUrl,\n        getHappDna,\n        insertScripts,\n    }\n})();\n\n\n\n\nconsole.log(\"hQuery loaded\");"]}