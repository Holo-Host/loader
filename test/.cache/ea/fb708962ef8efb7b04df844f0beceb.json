{"id":"../web/hClient/node_modules/core-js/modules/_math-fround.js","dependencies":[{"name":"/home/willem/repos/loader/web/hClient/node_modules/core-js/package.json","includedInParent":true,"mtime":1550712118955},{"name":"./_math-sign","loc":{"line":2,"column":19},"parent":"/home/willem/repos/loader/web/hClient/node_modules/core-js/modules/_math-fround.js","resolved":"/home/willem/repos/loader/web/hClient/node_modules/core-js/modules/_math-sign.js"}],"generated":{"js":"// 20.2.2.16 Math.fround(x)\nvar sign = require('./_math-sign');\nvar pow = Math.pow;\nvar EPSILON = pow(2, -52);\nvar EPSILON32 = pow(2, -23);\nvar MAX32 = pow(2, 127) * (2 - EPSILON32);\nvar MIN32 = pow(2, -126);\n\nvar roundTiesToEven = function (n) {\n  return n + 1 / EPSILON - 1 / EPSILON;\n};\n\nmodule.exports = Math.fround || function fround(x) {\n  var $abs = Math.abs(x);\n  var $sign = sign(x);\n  var a, result;\n  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n  a = (1 + EPSILON32 / EPSILON) * $abs;\n  result = a - (a - $abs);\n  // eslint-disable-next-line no-self-compare\n  if (result > MAX32 || result != result) return $sign * Infinity;\n  return $sign * result;\n};\n","map":{"mappings":[{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-fround.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}}],"sources":{"../web/hClient/node_modules/core-js/modules/_math-fround.js":"// 20.2.2.16 Math.fround(x)\nvar sign = require('./_math-sign');\nvar pow = Math.pow;\nvar EPSILON = pow(2, -52);\nvar EPSILON32 = pow(2, -23);\nvar MAX32 = pow(2, 127) * (2 - EPSILON32);\nvar MIN32 = pow(2, -126);\n\nvar roundTiesToEven = function (n) {\n  return n + 1 / EPSILON - 1 / EPSILON;\n};\n\nmodule.exports = Math.fround || function fround(x) {\n  var $abs = Math.abs(x);\n  var $sign = sign(x);\n  var a, result;\n  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n  a = (1 + EPSILON32 / EPSILON) * $abs;\n  result = a - (a - $abs);\n  // eslint-disable-next-line no-self-compare\n  if (result > MAX32 || result != result) return $sign * Infinity;\n  return $sign * result;\n};\n"},"lineCount":24}},"hash":"1d8742a32d09549e5f8823a8c2b0c22a","cacheData":{"env":{}}}