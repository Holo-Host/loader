{"id":"../web/hClient/node_modules/core-js/modules/_math-scale.js","dependencies":[{"name":"/home/willem/repos/loader/web/hClient/node_modules/core-js/package.json","includedInParent":true,"mtime":1550712118955}],"generated":{"js":"// https://rwaldron.github.io/proposal-math-extensions/\nmodule.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {\n  if (\n    arguments.length === 0\n      // eslint-disable-next-line no-self-compare\n      || x != x\n      // eslint-disable-next-line no-self-compare\n      || inLow != inLow\n      // eslint-disable-next-line no-self-compare\n      || inHigh != inHigh\n      // eslint-disable-next-line no-self-compare\n      || outLow != outLow\n      // eslint-disable-next-line no-self-compare\n      || outHigh != outHigh\n  ) return NaN;\n  if (x === Infinity || x === -Infinity) return x;\n  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;\n};\n","map":{"mappings":[{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../web/hClient/node_modules/core-js/modules/_math-scale.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}}],"sources":{"../web/hClient/node_modules/core-js/modules/_math-scale.js":"// https://rwaldron.github.io/proposal-math-extensions/\nmodule.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {\n  if (\n    arguments.length === 0\n      // eslint-disable-next-line no-self-compare\n      || x != x\n      // eslint-disable-next-line no-self-compare\n      || inLow != inLow\n      // eslint-disable-next-line no-self-compare\n      || inHigh != inHigh\n      // eslint-disable-next-line no-self-compare\n      || outLow != outLow\n      // eslint-disable-next-line no-self-compare\n      || outHigh != outHigh\n  ) return NaN;\n  if (x === Infinity || x === -Infinity) return x;\n  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;\n};\n"},"lineCount":19}},"hash":"ec0cf05af794c71a3f9c54894d909361","cacheData":{"env":{}}}